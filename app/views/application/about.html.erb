<%= javascript_include_tag "contents_table.js" %>
<%= stylesheet_link_tag "contents_table" %>

<% content_for :title do %>
  About
<% end %>

<h2 id = "about_this_service">About this service</h2>

<p>CSV looks easy, but it can be hard to make a CSV file that other people can work with. <strong>CSVLint</strong> helps you to check that your CSV file is readable. And you can use it to check whether it contains the columns and types of values that it should.</p>

<p>This service is maintained by an open source community and hosted by the Open Data Institute (ODI). </p>

<div class="all-questions">

<h2 id = "how_use_csv">How to Use CSVLint</h2>

<p>Follow these three steps:</p>

<ol>
<li>Enter the location of the CSV file you want to check, or upload it if it's not on the web already.</li>
<li>Do you have a schema? If you do, you can enter its location or upload it.</li>
<li>Hit the big <strong>Validate</strong> button.</li>
</ol>

<p>You'll see a page that tells you how to improve your CSV file, if it needs improvement.</p>

<ul>
<li><strong>Errors</strong> are things you really need to fix, because they'll stop people from being able to use your data</li>
<li><strong>Warnings</strong> are thing you should fix if you can because doing so will help people to use your data</li>
<li><strong>Information</strong> messages are hints and tips of things that could make the data easier to use</li>
</ul>

<h3>Get a Badge</h3>

<p>On the page that summarises the CSV, you'll also see a badge, which might look like this:</p>

<p><img alt=":csv%20 %20warnings yellow" src="https://img.shields.io/badge/CSV-warnings-yellow.svg"></p>

<p>If you click on that you'll get a pop-up that gives you some code for embedding the badge in your page. You can put that next to some CSV and it means you and other people will be able to see whether the CSV is valid or not.</p>

<p>Wear your valid CSV badge with pride!</p>

<h3>Fix that CSV</h3>

<p>We can fix some of the errors that we find in CSV files, such as bad encodings. At the bottom of the page that shows you how to improve the file, you'll see a button that says <strong>Download Standardised CSV File</strong>.</p>

<p>That won't fix all the problems: we won't delete empty lines or try to fix up values that are in the wrong format. We can't change the way your server provides CSV either, so you'll still be warned if it's not using the right <code>Content-Type</code> header.</p>

<h3>Find a Schema</h3>

<p>The <a href="/schemas">Recent schemas</a> page gives a list of schemas that people have been using to validate their CSV files. See if there's a schema that you could use!</p>

<h3>Dialects</h3>

<%= image_tag("dialect.png") %>

<br><br>

<p>If your CSV File is sizeable and contains only one row, CSVLint detects that
  your file may be using a different "dialect". For example, your file may use
<code>;</code> delimiters to separate fields rather than the standard
<code>,</code>. Although it is encouraged to keep to CSV Standard File
Format, we provide an option to change the dialect to suit your particular file.</p>

<h2 id = "how_write_csv">How to Write Good CSV</h2>

<p>Good CSVs look like this:</p>

<pre><code>OrganisationId,WeekDay,Times,IsOpen,OpeningTimeType
1186,Monday,09:30-13:00,True,General
1186,Monday,13:30-17:30,True,General
...
</code></pre>

<p>for a table like this:</p>

<table class="table">
<thead>
 <tr>
   <th>OrganisationId</th>
   <th>WeekDay</th>
   <th>Times</th>
   <th>IsOpen</th>
   <th>OpeningTimeType</th>
 </tr>
</thead>
<tbody>
  <tr>
    <td>1186</td>
    <td>Monday</td>
    <td>09:30-13:00</td>
    <td>True</td>
    <td>General</td>
  </tr>
  <tr>
    <td>1186</td>
    <td>Monday</td>
    <td>13:30-17:30</td>
    <td>True</td>
    <td>General</td>
  </tr>
  <tr>
    <td colspan="5">...</td>
  </tr>
</tbody>
</table>

<p>The first row is a header row that contains the names of some columns.</p>

<p>The rest of the rows are data rows that contain a number of fields.</p>

<p>Line endings use <code>CRLF</code> (Windows line endings) and the column names and fields are separated by commas.</p>

<p>If a field contains a comma, a line ending or a double quote then the field is escaped by wrapping it in double quotes. Within a field that's escaped like that, any double quotes are doubled up. For example:</p>

<pre><code>OrganisationCode,OrganisationName,Address1,Address2,Address3,City,County,Postcode
1-231076921,"Next Stage ""A Way Forward"" Ltd",Head Office,"HR House, 28 Manchester Road",Westhoughton,Bolton,Lancashire,BL5 3QJ
...
</code></pre>

<p>for a table like this:</p>

<table class="table">
<thead>
 <tr>
   <th>OrganisationCode</th>
   <th>OrganisationName</th>
   <th>Address1</th>
   <th>Address2</th>
   <th>Address3</th>
   <th>City</th>
   <th>County</th>
   <th>Postcode</th>
 </tr>
</thead>
<tbody>
  <tr>
    <td>1-231076921</td>
    <td>Next Stage "A Way Forward" Ltd</td>
    <td>Head Office </td>
    <td>HR House, 28 Manchester Road</td>
    <td>Westhoughton</td>
    <td>Bolton</td>
    <td>Lancashire</td>
    <td>BL5 3QJ</td>
  </tr>
  <tr>
    <td colspan="7">...</td>
  </tr>
</tbody>
</table>


<h3>Common Errors</h3>

<p>When checking your CSV, we may return one or more of the following errors:</p>

<ul>
<li><b>Invalid encoding: </b>if there are any odd characters in a file which could cause encoding errors</li>
<li><b>Line breaks: </b>if line breaks are not the same throughout the file</li>
<li><b>Undeclared header: </b>if you do not specify in a machine readable way whether or not your CSV has a header row</li>
<li><b>Ragged rows:</b> if every row in the file doesn't have the same number of columns</li>
<li><b>Blank rows:</b> if there are any blank rows</li>
<li><b>Stray/Unclosed quote:</b> if there are any unclosed quotes in the file</li>
<li><b>Whitespace:</b> if there is any whitespace between commas and double quotes around fields</li>
</ul>

<p>If we get the CSV from a URL, then we also check for these errors:</p>

<ul>
<li><b>Not found: </b>if the file doesn't exist (we get a <code>404 Not Found</code> response)</li>
<li><b>Wrong content type: </b>if the content type isn't set <code>text/csv</code></li>
</ul>

<h3>Common Warnings</h3>

<p>We also return the following warnings:</p>

<ul>
  <li><b>Encoding:</b> if you don't use UTF-8 as the encoding for the file</li>
  <li><b>Check options:</b> if the CSV file only contains a single comma-separated column; this usually means you're using a separator other than a comma</li>
  <li><b>Inconsistent values:</b> if any column contains inconsistent values, for example if most values in a column are numeric but there's a significant proportion that aren't</li>
  <li><b>Empty column name:</b> if all the columns don't have a name</li>
  <li><b>Duplicate column name:</b> if all the column names aren't unique</li>
  <li><b>Title row:</b> if there appears to be a title field in the first row of the CSV</li>
</ul>

<p>and if we get the CSV from a URL, we return these warnings:</p>

<ul>
  <li><b>No content type:</b> if you don't provide a <code>Content-Type</code> HTTP header</li>
  <li><b>No encoding:</b> if you don't specify an encoding with a <code>charset</code> parameter</li>
  <li><b>Excel:</b> if it looks like you're serving an Excel file rather than CSV (because the suffix for the file is <code>.xls</code> and there is no 'Content-Type' header)</li>
</ul>

<h3>Extra Information</h3>

<ul>
  <li><b>Non RFC line breaks:</b> We let you know if you use line breaks that aren't <code>CRLF</code> (Windows line endings). That's because <a href="http://tools.ietf.org/html/rfc4180">RFC4180</a>, which is the closest thing to standard CSV that there is, says that you should use <code>CRLF</code> line endings.</li>
  <li><b>Assumed header:</b> We assume that a header is present.</li>
</ul>

<h2 id = "how_write_schema">How to Write a Schema</h2>

<p>We currently recognise schemas that use the <a href="https://frictionlessdata.io/specs/table-schema/">JSON Table Schema</a>, with a few modifications.</p>

<p>An example schema for the first CSV shown above could be:</p>

<pre><code>{
    "fields": [
        {
            "name": "OrganisationId",
            "title": "Organisation ID",
            "constraints": {
                "required": true,
                "type": "http://www.w3.org/TR/xmlschema-2/#int"
            }
        },
        {
            "name": "WeekDay",
            "title": "Day of the week",
            "constraints": {
                "required": true,
                "pattern": "(Mon|Tue|Wednes|Thurs|Fri|Satur|Sun)day"
            }
        },
        {
            "name": "Times",
            "constraints": {
                "required": true,
                "pattern": "(0[0-9]|1[0-2]):[0-5][0-9]-(0[0-9]|1[0-2]):[0-5][0-9]"
            }
        },
        {
            "name": "IsOpen",
            "title": "Open?",
            "constraints": {
                "required": true,
                "pattern": "(True|False)"
            }
        },
        {
            "name": "OpeningTimeType",
            "title": "General or additional opening",
            "constraints": {
                "required": true,
                "pattern": "(General|Additional)"
            }
        }
    ]
}
</code></pre>

<p>The constraints that CSVLint checks for are shown in the following table:</p>

<table class="table">
<thead>
 <tr>
   <th>Constraint</th>
   <th>Value type</th>
   <th>Description</th>
 </tr>
</thead>
<tbody>
  <tr>
    <td>required</td>
    <td>boolean</td>
    <td>if true, there must be a value in this column on every row</td>
  </tr>
  <tr>
    <td>unique</td>
    <td>boolean</td>
    <td>if true, each row should have a different value in this column</td>
  </tr>
  <tr>
    <td>minLength</td>
    <td>integer</td>
    <td>every value must contain at least this number of characters</td>
  </tr>
  <tr>
    <td>maxLength</td>
    <td>integer</td>
    <td>no value can have more than this number of characters</td>
  </tr>
  <tr>
    <td>pattern</td>
    <td>regexp</td>
    <td>values must match this regular expression (Use <a href="http://rubular.com/">rubular.com</a> to test your regular expressions</td>
  </tr>
  <tr>
    <td>type</td>
    <td>URL</td>
    <td>a URL for a data type which every value must adhere to (see below)</td>
  </tr>
  <tr>
    <td>minimum</td>
    <td>number or date/time</td>
    <td>every value must be at least this value </td>
  </tr>
  <tr>
    <td>maximum</td>
    <td>number or date/time</td>
    <td>no value should be more than this value</td>
  </tr>
  <tr>
    <td>datePattern</td>
    <td><a href="http://www.tutorialspoint.com/c_standard_library/c_function_strftime.htm">strftime</a></td>
    <td>the format for date/time values in this column</td>
  </tr>
</tbody>
</table>

<p>The supported data types are currently:</p>

<ul>
  <li>string &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#string"><code>http://www.w3.org/2001/XMLSchema#string</code></a>
  <li>integer &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#int"><code>http://www.w3.org/2001/XMLSchema#int</code></a>
  <li>float &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#float"><code>http://www.w3.org/2001/XMLSchema#float</code></a>
  <li>double &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#double"><code>http://www.w3.org/2001/XMLSchema#double</code></a>
  <li>URL &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#anyURI"><code>http://www.w3.org/2001/XMLSchema#anyURI</code></a>
  <li>boolean &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#boolean"><code>http://www.w3.org/2001/XMLSchema#boolean</code></a>
  <li>non-positive integer &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#nonPositiveInteger"><code>http://www.w3.org/2001/XMLSchema#nonPositiveInteger</code></a>
  <li>positive integer &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#positiveInteger"><code>http://www.w3.org/2001/XMLSchema#positiveInteger</code></a>
  <li>non-negative integer &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#nonNegativeInteger"><code>http://www.w3.org/2001/XMLSchema#nonNegativeInteger</code></a>
  <li>negative integer &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#negativeInteger"><code>http://www.w3.org/2001/XMLSchema#negativeInteger</code></a>
  <li>date &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#date"><code>http://www.w3.org/2001/XMLSchema#date</code></a>
  <li>date &amp; time &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#dateTime"><code>http://www.w3.org/2001/XMLSchema#dateTime</code></a>
  <li>year &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#gYear"><code>http://www.w3.org/2001/XMLSchema#gYear</code></a>
  <li>year &amp; month &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#gYearMonth"><code>http://www.w3.org/2001/XMLSchema#gYearMonth</code></a>
  <li>time &mdash; <a href="http://www.w3.org/TR/xmlschema-2/#time"><code>http://www.w3.org/2001/XMLSchema#time</code></a>
</ul>

<p>Use of an unknown data type will result in the column failing to validate.</p>

<p>CSVLint will give schema validation error and warning messages if these constraints aren't met. In addition we check that each column name in the CSV file is the same as the name for the column in the same position in the schema.</p>

<h3>Common Errors</h3>

<p>We check the following things about the schema that you provide:</p>

<ul>
  <li>
    <b>Missing value:</b> a column marked as `required` in the schema has no value</li>
  <li>
    <b>Minimum length:</b> a column with a `minLength` constraint has a value that is too short
  </li>
  <li>
    <b>Maximum length:</b> a column with a `maxLength` constraint has a value that is too long
  </li>
  <li>
    <b>Pattern:</b> a column with a `pattern` constraint has a value that doesn't match the regular expression
  </li>
  <li>
    <b>Invalid regex:</b> a regular expression pattern defined in the schema is not in valid regex form
  </li>
  <li>
    <b>Unique:</b> a column with a `unique` constraint contains non-unique values
  </li>
  <li>
    <b>Below minimum:</b> a column with a `minimum` constraint contains a value that is below the minimum
  </li>
  <li>
    <b>Above maximum:</b> a column with a `maximum` constraint contains a value that is above the maximum
  </li>
</ul>

<h3>Common Warnings</h3>

<ul>
  <li>
    <b>Header name:</b> the header in the CSV has a column name that doesn't match the schema
  </li>
  <li>
    <b>Missing column:</b> a row in the CSV file has a missing column, that is specified in the schema
  </li>
  <li>
    <b>Extra column:</b> a row in the CSV file has an extra column
  </li>
</ul>

<p>
  Please check the <a href="/privacy_policy">privacy policy</a> for information on how we store CSVLint data.
</p>

<p>
  CSVLint should be able to handle files up to around 100MB.
</p>

<h2>Acknowledgements</h2>

<a href="http://project.dapaas.eu/">
  <%= image_tag "dapaas_logo.jpg", height: '96', width: '160' %>
</a>

<br><br>

<p>
  Development of this tool was partly supported by the
  <a href="http://project.dapaas.eu/">DaPaaS</a> project,
  co-funded by the European Commission under the Seventh Framework Programme (FP7 2007-2013).
  The DaPaaS project has also developed the <a href="https://datagraft.net/">DataGraft platform</a>
  where you can transform and publish your data online in tabular and linked data form.
</p>

</div>
